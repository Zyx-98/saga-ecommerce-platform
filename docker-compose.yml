services:
  order-service:
    container_name: order_service
    build:
      context: ./order-service
      target: development
    volumes:
      - ./order-service:/app
      - /app/node_modules
    ports:
      - 3000:3000
    environment:
      - NODE_ENV=development
    networks:
      - app-network
    depends_on:
      - kafka-init
      - postgres

  inventory-service:
    container_name: inventory_service
    build:
      context: ./inventory-service
      target: development
    volumes:
      - ./inventory-service:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
    networks:
      - app-network
    depends_on:
      - kafka-init
      - postgres

  payment-service:
    container_name: payment_service
    build:
      context: ./payment-service
      target: development
    volumes:
      - ./payment-service:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
    networks:
      - app-network
    depends_on:
      - kafka-init
      - postgres

  postgres:
    image: postgres:14-alpine
    container_name: postgres_db
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: orders_db
    ports:
      - "5432:5432"
    volumes:
      - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-kafka:7.3.2
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "5556:5556"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_OPTS: "-javaagent:/usr/app/jmx_prometheus_javaagent.jar=5556:/usr/app/jmx-kafka.yml"
    volumes:
      - ./jmx-exporter/jmx_prometheus_javaagent.jar:/usr/app/jmx_prometheus_javaagent.jar
      - ./jmx-exporter/jmx-kafka.yml:/usr/app/jmx-kafka.yml
    networks:
      - app-network
  kafka-init:
    image: confluentinc/cp-kafka:7.3.2
    depends_on:
      - kafka
    networks:
      - app-network
    volumes:
      - ./create-kafka-topics.sh:/create-kafka-topics.sh
    entrypoint: ["/bin/bash", "/create-kafka-topics.sh"]

  akhq:
    image: tchiotludo/akhq:latest
    container_name: akhq_ui
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            docker-kafka-cluster:
              properties:
                bootstrap.servers: "kafka:29092"
    networks:
      - app-network
  kafka-exporter:
    image: danielqsj/kafka-exporter:latest
    container_name: kafka_exporter
    depends_on:
      - kafka
    ports:
      - "9308:9308"
    command:
      - --kafka.server=kafka:29092
      - --web.listen-address=:9308
    networks:
      - app-network
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    networks:
      - app-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus
    networks:
      - app-network

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:

networks:
  app-network:
    driver: bridge